// Generated by CoffeeScript 1.7.1

/* @author Abed Halawi <abed.halawi@vinelab.com */

(function() {
  var Session, SessionManager, SessionNamespace, extend, redis,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  redis = require('redis');

  extend = require('extend');

  Session = require('./Session').klass;

  SessionNamespace = require('./HashSession').klass;

  SessionManager = (function() {

    /*
     * Define some sane defaults.
     *
     * @var {object}
     */
    SessionManager.prototype.defaults = {
      config: {
        session: {
          prefix: 'session'
        },
        redis: {
          host: '127.0.0.1',
          port: 6379
        }
      }
    };


    /*
     * Create an instance of this class.
     *
     * @param {object} config The configuration to be used.
     */

    function SessionManager(config) {
      this.start = __bind(this.start, this);
      this.storeKey = __bind(this.storeKey, this);
      this.config = extend(this.defaults.config, config);
      this.RedisClient = redis.createClient(config.redis.port, config.redis.host, config.redis);
    }


    /*
     * Generate the key to be used for storing items.
     *
     * @param {string} attribute
     */

    SessionManager.prototype.storeKey = function(attribute) {
      var prefix, _ref;
      prefix = extend(this.defaults.config.session, (_ref = this.config) != null ? _ref.session : void 0);
      return "" + prefix + ":" + attribute;
    };


    /*
     * Start a new session.
     *
     * @param {namespace} namespace* (Optional)
     */

    SessionManager.prototype.start = function(namespace) {
      if (namespace != null) {
        return new SessionNamespace(this.config, namespace, this.RedisClient);
      } else {
        return new Session(this.config, this.RedisClient);
      }
    };

    return SessionManager;

  })();

  module.exports.klass = SessionManager;

  module.exports.create = function(config) {
    return new SessionManager(config);
  };

}).call(this);
