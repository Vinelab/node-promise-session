// Generated by CoffeeScript 1.7.1

/* @author Abed Halawi <abed.halawi@vinelab.com> */

(function() {
  var SessionNamespace, base64id, q,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  q = require('q');

  base64id = require('base64id');

  SessionNamespace = (function() {

    /*
     * Create a new instance of this class.
     *
     * @param {string} namespace
     * @param {object} RedisClient The redis client.
     */
    function SessionNamespace(config, namespace, RedisClient) {
      this.config = config;
      this.namespace = namespace;
      this.RedisClient = RedisClient;
      this.storeKey = __bind(this.storeKey, this);
      this.destroy = __bind(this.destroy, this);
      this.remove = __bind(this.remove, this);
      this.get = __bind(this.get, this);
      this.put = __bind(this.put, this);
      this.has = __bind(this.has, this);
      this.id = base64id.generateId();
      this.is_started = true;
    }


    /*
     * Determine whether a key exists for this session.
     *
     * @param {string} key
     */

    SessionNamespace.prototype.has = function(key) {
      var dfd;
      dfd = q.defer();
      this.RedisClient.hexists(this.storeKey(), key, function(err, exists) {
        if (err != null) {
          return dfd.reject(err);
        }
        return dfd.resolve(Boolean(exists));
      });
      return dfd.promise;
    };


    /*
     * Put a key/value pair or an array of key/value pairs
     *  in the session.
     *
     *  @param {string|object} key
     *  @param {mixed} value* (Optional)
     */

    SessionNamespace.prototype.put = function(key, value) {
      var dfd, pairs, values;
      dfd = q.defer();
      pairs = {};
      if (typeof key !== 'object') {
        pairs[key] = value;
      } else {
        pairs = key;
      }
      values = [this.storeKey()];
      values.push(pairs);
      values.push(function(err, result) {
        if (err != null) {
          return dfd.reject(err);
        }
        return dfd.resolve(result);
      });
      this.RedisClient.hmset.apply(this.RedisClient, values);
      return dfd.promise;
    };


    /*
     * Get an item from the session.
     *
     * @param {string|array} key
     * @param {mixed} default
     */

    SessionNamespace.prototype.get = function(key) {
      var dfd, keys, values;
      dfd = q.defer();
      keys = typeof key !== 'array' ? [key] : key;
      values = [this.storeKey()].concat(keys);
      values.push(function(err, result) {
        var e;
        if (err != null) {
          return dfd.reject(err);
        }
        if (typeof key === 'string') {
          result = result.pop();
        }
        try {
          result = JSON.parse(result)._v;
        } catch (_error) {
          e = _error;
          result = result;
        }
        return dfd.resolve(result);
      });
      this.RedisClient.hmget.apply(this.RedisClient, values);
      return dfd.promise;
    };


    /*
     * Remove a key from the session.
     *
     * @param {string|array} key
     */

    SessionNamespace.prototype.remove = function(key) {
      var dfd;
      dfd = q.defer();
      this.RedisClient.hdel(this.storeKey(), key, (function(_this) {
        return function(err, removed) {
          if (err != null) {
            return dfd.reject(err);
          }
          return dfd.resolve(Boolean(removed));
        };
      })(this));
      return dfd.promise;
    };


    /*
     * Destroy this session.
     */

    SessionNamespace.prototype.destroy = function() {
      var dfd;
      dfd = q.defer();
      this.RedisClient.del(this.storeKey(), (function(_this) {
        return function(err, destroyed) {
          if (err != null) {
            return dfd.reject(err);
          }
          _this.is_started = false;
          return dfd.resolve(Boolean(destroyed));
        };
      })(this));
      return dfd.promise;
    };


    /*
     * Generate the hash key for this session.
     */

    SessionNamespace.prototype.storeKey = function() {
      return "" + this.config.session.prefix + ":" + this.namespace + ":" + this.id;
    };

    return SessionNamespace;

  })();

  module.exports.klass = SessionNamespace;

}).call(this);
